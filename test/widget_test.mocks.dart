// Mocks generated by Mockito 5.3.2 from annotations
// in tmdb_prj/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i18;

import 'package:bloc/bloc.dart' as _i19;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tmdb_prj/src/app/constants/constants.dart' as _i20;
import 'package:tmdb_prj/src/app/types/enums.dart' as _i21;
import 'package:tmdb_prj/src/domain/entities/genre.dart' as _i22;
import 'package:tmdb_prj/src/domain/usecases/genre/get_movie_genres.dart'
    as _i15;
import 'package:tmdb_prj/src/domain/usecases/genre/get_tvshow_genres.dart'
    as _i16;
import 'package:tmdb_prj/src/domain/usecases/movie/get_featured_movies.dart'
    as _i3;
import 'package:tmdb_prj/src/domain/usecases/movie/get_latest_movies.dart'
    as _i5;
import 'package:tmdb_prj/src/domain/usecases/movie/get_popular_movies.dart'
    as _i2;
import 'package:tmdb_prj/src/domain/usecases/movie/get_upcoming_movies.dart'
    as _i4;
import 'package:tmdb_prj/src/domain/usecases/movie/search_movie.dart' as _i11;
import 'package:tmdb_prj/src/domain/usecases/people/get_popular_people.dart'
    as _i9;
import 'package:tmdb_prj/src/domain/usecases/people/search_people.dart' as _i13;
import 'package:tmdb_prj/src/domain/usecases/tvshow/get_featured_tvshows.dart'
    as _i8;
import 'package:tmdb_prj/src/domain/usecases/tvshow/get_latest_tvshows.dart'
    as _i7;
import 'package:tmdb_prj/src/domain/usecases/tvshow/get_popular_tvshows.dart'
    as _i6;
import 'package:tmdb_prj/src/domain/usecases/tvshow/search_tvshow.dart' as _i12;
import 'package:tmdb_prj/src/presentation/pages/genre/bloc/genre_bloc.dart'
    as _i17;
import 'package:tmdb_prj/src/presentation/pages/home/bloc/home_bloc.dart'
    as _i10;
import 'package:tmdb_prj/src/presentation/pages/search/bloc/search_bloc.dart'
    as _i14;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetPopularMovies_0 extends _i1.SmartFake
    implements _i2.GetPopularMovies {
  _FakeGetPopularMovies_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetFeaturedMovies_1 extends _i1.SmartFake
    implements _i3.GetFeaturedMovies {
  _FakeGetFeaturedMovies_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetUpcomingMovies_2 extends _i1.SmartFake
    implements _i4.GetUpcomingMovies {
  _FakeGetUpcomingMovies_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetLatestMovies_3 extends _i1.SmartFake
    implements _i5.GetLatestMovies {
  _FakeGetLatestMovies_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetPopularTvShows_4 extends _i1.SmartFake
    implements _i6.GetPopularTvShows {
  _FakeGetPopularTvShows_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetLatestTvShows_5 extends _i1.SmartFake
    implements _i7.GetLatestTvShows {
  _FakeGetLatestTvShows_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetFeaturedTvShows_6 extends _i1.SmartFake
    implements _i8.GetFeaturedTvShows {
  _FakeGetFeaturedTvShows_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetPopularPeople_7 extends _i1.SmartFake
    implements _i9.GetPopularPeople {
  _FakeGetPopularPeople_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHomeState_8 extends _i1.SmartFake implements _i10.HomeState {
  _FakeHomeState_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSearchMovie_9 extends _i1.SmartFake implements _i11.SearchMovie {
  _FakeSearchMovie_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSearchTvshow_10 extends _i1.SmartFake implements _i12.SearchTvshow {
  _FakeSearchTvshow_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSearchPeople_11 extends _i1.SmartFake implements _i13.SearchPeople {
  _FakeSearchPeople_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSearchState_12 extends _i1.SmartFake implements _i14.SearchState {
  _FakeSearchState_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetMovieGenres_13 extends _i1.SmartFake
    implements _i15.GetMovieGenres {
  _FakeGetMovieGenres_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTvShowGenres_14 extends _i1.SmartFake
    implements _i16.GetTvShowGenres {
  _FakeGetTvShowGenres_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGenreState_15 extends _i1.SmartFake implements _i17.GenreState {
  _FakeGenreState_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeBloc extends _i1.Mock implements _i10.HomeBloc {
  @override
  _i2.GetPopularMovies get getPopularMovies => (super.noSuchMethod(
        Invocation.getter(#getPopularMovies),
        returnValue: _FakeGetPopularMovies_0(
          this,
          Invocation.getter(#getPopularMovies),
        ),
        returnValueForMissingStub: _FakeGetPopularMovies_0(
          this,
          Invocation.getter(#getPopularMovies),
        ),
      ) as _i2.GetPopularMovies);
  @override
  _i3.GetFeaturedMovies get getFeaturedMovies => (super.noSuchMethod(
        Invocation.getter(#getFeaturedMovies),
        returnValue: _FakeGetFeaturedMovies_1(
          this,
          Invocation.getter(#getFeaturedMovies),
        ),
        returnValueForMissingStub: _FakeGetFeaturedMovies_1(
          this,
          Invocation.getter(#getFeaturedMovies),
        ),
      ) as _i3.GetFeaturedMovies);
  @override
  _i4.GetUpcomingMovies get getUpcomingMovies => (super.noSuchMethod(
        Invocation.getter(#getUpcomingMovies),
        returnValue: _FakeGetUpcomingMovies_2(
          this,
          Invocation.getter(#getUpcomingMovies),
        ),
        returnValueForMissingStub: _FakeGetUpcomingMovies_2(
          this,
          Invocation.getter(#getUpcomingMovies),
        ),
      ) as _i4.GetUpcomingMovies);
  @override
  _i5.GetLatestMovies get getLatestMovies => (super.noSuchMethod(
        Invocation.getter(#getLatestMovies),
        returnValue: _FakeGetLatestMovies_3(
          this,
          Invocation.getter(#getLatestMovies),
        ),
        returnValueForMissingStub: _FakeGetLatestMovies_3(
          this,
          Invocation.getter(#getLatestMovies),
        ),
      ) as _i5.GetLatestMovies);
  @override
  _i6.GetPopularTvShows get getPopularTvShows => (super.noSuchMethod(
        Invocation.getter(#getPopularTvShows),
        returnValue: _FakeGetPopularTvShows_4(
          this,
          Invocation.getter(#getPopularTvShows),
        ),
        returnValueForMissingStub: _FakeGetPopularTvShows_4(
          this,
          Invocation.getter(#getPopularTvShows),
        ),
      ) as _i6.GetPopularTvShows);
  @override
  _i7.GetLatestTvShows get getLatestTvShows => (super.noSuchMethod(
        Invocation.getter(#getLatestTvShows),
        returnValue: _FakeGetLatestTvShows_5(
          this,
          Invocation.getter(#getLatestTvShows),
        ),
        returnValueForMissingStub: _FakeGetLatestTvShows_5(
          this,
          Invocation.getter(#getLatestTvShows),
        ),
      ) as _i7.GetLatestTvShows);
  @override
  _i8.GetFeaturedTvShows get getFeaturedTvShows => (super.noSuchMethod(
        Invocation.getter(#getFeaturedTvShows),
        returnValue: _FakeGetFeaturedTvShows_6(
          this,
          Invocation.getter(#getFeaturedTvShows),
        ),
        returnValueForMissingStub: _FakeGetFeaturedTvShows_6(
          this,
          Invocation.getter(#getFeaturedTvShows),
        ),
      ) as _i8.GetFeaturedTvShows);
  @override
  _i9.GetPopularPeople get getPopularPeople => (super.noSuchMethod(
        Invocation.getter(#getPopularPeople),
        returnValue: _FakeGetPopularPeople_7(
          this,
          Invocation.getter(#getPopularPeople),
        ),
        returnValueForMissingStub: _FakeGetPopularPeople_7(
          this,
          Invocation.getter(#getPopularPeople),
        ),
      ) as _i9.GetPopularPeople);
  @override
  _i10.HomeState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeHomeState_8(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeHomeState_8(
          this,
          Invocation.getter(#state),
        ),
      ) as _i10.HomeState);
  @override
  _i18.Stream<_i10.HomeState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i18.Stream<_i10.HomeState>.empty(),
        returnValueForMissingStub: _i18.Stream<_i10.HomeState>.empty(),
      ) as _i18.Stream<_i10.HomeState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void add(_i10.HomeEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i10.HomeEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i10.HomeState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i10.HomeEvent>(
    _i19.EventHandler<E, _i10.HomeState>? handler, {
    _i19.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i19.Transition<_i10.HomeEvent, _i10.HomeState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i18.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  void onChange(_i19.Change<_i10.HomeState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SearchBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchBloc extends _i1.Mock implements _i14.SearchBloc {
  @override
  _i20.SearchTypes get currentSearchTypeItemSelected => (super.noSuchMethod(
        Invocation.getter(#currentSearchTypeItemSelected),
        returnValue: _i20.SearchTypes.movie,
        returnValueForMissingStub: _i20.SearchTypes.movie,
      ) as _i20.SearchTypes);
  @override
  set currentSearchTypeItemSelected(
          _i20.SearchTypes? _currentSearchTypeItemSelected) =>
      super.noSuchMethod(
        Invocation.setter(
          #currentSearchTypeItemSelected,
          _currentSearchTypeItemSelected,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i11.SearchMovie get searchMovie => (super.noSuchMethod(
        Invocation.getter(#searchMovie),
        returnValue: _FakeSearchMovie_9(
          this,
          Invocation.getter(#searchMovie),
        ),
        returnValueForMissingStub: _FakeSearchMovie_9(
          this,
          Invocation.getter(#searchMovie),
        ),
      ) as _i11.SearchMovie);
  @override
  _i12.SearchTvshow get searchTvshow => (super.noSuchMethod(
        Invocation.getter(#searchTvshow),
        returnValue: _FakeSearchTvshow_10(
          this,
          Invocation.getter(#searchTvshow),
        ),
        returnValueForMissingStub: _FakeSearchTvshow_10(
          this,
          Invocation.getter(#searchTvshow),
        ),
      ) as _i12.SearchTvshow);
  @override
  _i13.SearchPeople get searchPeople => (super.noSuchMethod(
        Invocation.getter(#searchPeople),
        returnValue: _FakeSearchPeople_11(
          this,
          Invocation.getter(#searchPeople),
        ),
        returnValueForMissingStub: _FakeSearchPeople_11(
          this,
          Invocation.getter(#searchPeople),
        ),
      ) as _i13.SearchPeople);
  @override
  _i14.SearchState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSearchState_12(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeSearchState_12(
          this,
          Invocation.getter(#state),
        ),
      ) as _i14.SearchState);
  @override
  _i18.Stream<_i14.SearchState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i18.Stream<_i14.SearchState>.empty(),
        returnValueForMissingStub: _i18.Stream<_i14.SearchState>.empty(),
      ) as _i18.Stream<_i14.SearchState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void add(_i14.SearchEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i14.SearchEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i14.SearchState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i14.SearchEvent>(
    _i19.EventHandler<E, _i14.SearchState>? handler, {
    _i19.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i19.Transition<_i14.SearchEvent, _i14.SearchState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i18.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  void onChange(_i19.Change<_i14.SearchState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GenreBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenreBloc extends _i1.Mock implements _i17.GenreBloc {
  @override
  _i21.GenreParentItems get currentGenreTopBarSelected => (super.noSuchMethod(
        Invocation.getter(#currentGenreTopBarSelected),
        returnValue: _i21.GenreParentItems.movie,
        returnValueForMissingStub: _i21.GenreParentItems.movie,
      ) as _i21.GenreParentItems);
  @override
  set currentGenreTopBarSelected(
          _i21.GenreParentItems? _currentGenreTopBarSelected) =>
      super.noSuchMethod(
        Invocation.setter(
          #currentGenreTopBarSelected,
          _currentGenreTopBarSelected,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set selectedGenre(_i22.Genre? _selectedGenre) => super.noSuchMethod(
        Invocation.setter(
          #selectedGenre,
          _selectedGenre,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i15.GetMovieGenres get getMovieGenres => (super.noSuchMethod(
        Invocation.getter(#getMovieGenres),
        returnValue: _FakeGetMovieGenres_13(
          this,
          Invocation.getter(#getMovieGenres),
        ),
        returnValueForMissingStub: _FakeGetMovieGenres_13(
          this,
          Invocation.getter(#getMovieGenres),
        ),
      ) as _i15.GetMovieGenres);
  @override
  set getMovieGenres(_i15.GetMovieGenres? _getMovieGenres) =>
      super.noSuchMethod(
        Invocation.setter(
          #getMovieGenres,
          _getMovieGenres,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i16.GetTvShowGenres get getTvShowGenres => (super.noSuchMethod(
        Invocation.getter(#getTvShowGenres),
        returnValue: _FakeGetTvShowGenres_14(
          this,
          Invocation.getter(#getTvShowGenres),
        ),
        returnValueForMissingStub: _FakeGetTvShowGenres_14(
          this,
          Invocation.getter(#getTvShowGenres),
        ),
      ) as _i16.GetTvShowGenres);
  @override
  set getTvShowGenres(_i16.GetTvShowGenres? _getTvShowGenres) =>
      super.noSuchMethod(
        Invocation.setter(
          #getTvShowGenres,
          _getTvShowGenres,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i17.GenreState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeGenreState_15(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeGenreState_15(
          this,
          Invocation.getter(#state),
        ),
      ) as _i17.GenreState);
  @override
  _i18.Stream<_i17.GenreState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i18.Stream<_i17.GenreState>.empty(),
        returnValueForMissingStub: _i18.Stream<_i17.GenreState>.empty(),
      ) as _i18.Stream<_i17.GenreState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void add(_i17.GenreEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i17.GenreEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i17.GenreState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i17.GenreEvent>(
    _i19.EventHandler<E, _i17.GenreState>? handler, {
    _i19.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i19.Transition<_i17.GenreEvent, _i17.GenreState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i18.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  void onChange(_i19.Change<_i17.GenreState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
