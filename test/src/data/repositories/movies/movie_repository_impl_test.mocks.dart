// Mocks generated by Mockito 5.3.2 from annotations
// in tmdb_prj/test/src/data/repositories/movies/movie_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tmdb_prj/src/data/models/credits_response.dart' as _i5;
import 'package:tmdb_prj/src/data/models/movie_details_response.dart' as _i3;
import 'package:tmdb_prj/src/data/models/movie_response.dart' as _i2;
import 'package:tmdb_prj/src/data/models/pictures_response.dart' as _i4;
import 'package:tmdb_prj/src/data/providers/local/movie_local_datasource.dart'
    as _i11;
import 'package:tmdb_prj/src/data/providers/remote/params/details_param.dart'
    as _i10;
import 'package:tmdb_prj/src/data/providers/remote/service/movie_remote_datasource.dart'
    as _i6;
import 'package:tmdb_prj/src/domain/usecases/movie/get_popular_movies.dart'
    as _i8;
import 'package:tmdb_prj/src/domain/usecases/movie/search_movie.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieResponse_0 extends _i1.SmartFake implements _i2.MovieResponse {
  _FakeMovieResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieDetailsResponse_1 extends _i1.SmartFake
    implements _i3.MovieDetailsResponse {
  _FakeMovieDetailsResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePicturesResponse_2 extends _i1.SmartFake
    implements _i4.PicturesResponse {
  _FakePicturesResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCreditsResponse_3 extends _i1.SmartFake
    implements _i5.CreditsResponse {
  _FakeCreditsResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRemoteDataSource extends _i1.Mock
    implements _i6.MovieRemoteDataSource {
  MockMovieRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.MovieResponse> getPopularMovies(
          {required _i8.PagingParam? pagingParam}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopularMovies,
          [],
          {#pagingParam: pagingParam},
        ),
        returnValue: _i7.Future<_i2.MovieResponse>.value(_FakeMovieResponse_0(
          this,
          Invocation.method(
            #getPopularMovies,
            [],
            {#pagingParam: pagingParam},
          ),
        )),
      ) as _i7.Future<_i2.MovieResponse>);
  @override
  _i7.Future<_i2.MovieResponse> getUpComingMovies(
          {required _i8.PagingParam? pagingParam}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUpComingMovies,
          [],
          {#pagingParam: pagingParam},
        ),
        returnValue: _i7.Future<_i2.MovieResponse>.value(_FakeMovieResponse_0(
          this,
          Invocation.method(
            #getUpComingMovies,
            [],
            {#pagingParam: pagingParam},
          ),
        )),
      ) as _i7.Future<_i2.MovieResponse>);
  @override
  _i7.Future<_i2.MovieResponse> getFeaturedMovies(
          {required _i8.PagingParam? pagingParam}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFeaturedMovies,
          [],
          {#pagingParam: pagingParam},
        ),
        returnValue: _i7.Future<_i2.MovieResponse>.value(_FakeMovieResponse_0(
          this,
          Invocation.method(
            #getFeaturedMovies,
            [],
            {#pagingParam: pagingParam},
          ),
        )),
      ) as _i7.Future<_i2.MovieResponse>);
  @override
  _i7.Future<_i2.MovieResponse> getLatestMovies(
          {required _i8.PagingParam? pagingParam}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLatestMovies,
          [],
          {#pagingParam: pagingParam},
        ),
        returnValue: _i7.Future<_i2.MovieResponse>.value(_FakeMovieResponse_0(
          this,
          Invocation.method(
            #getLatestMovies,
            [],
            {#pagingParam: pagingParam},
          ),
        )),
      ) as _i7.Future<_i2.MovieResponse>);
  @override
  _i7.Future<_i2.MovieResponse> searchMovies(
          {required _i9.SearchParams? searchParam}) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovies,
          [],
          {#searchParam: searchParam},
        ),
        returnValue: _i7.Future<_i2.MovieResponse>.value(_FakeMovieResponse_0(
          this,
          Invocation.method(
            #searchMovies,
            [],
            {#searchParam: searchParam},
          ),
        )),
      ) as _i7.Future<_i2.MovieResponse>);
  @override
  _i7.Future<_i3.MovieDetailsResponse> getMovieDetails(
          {required _i10.MovieDetailsParam? detailsParam}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieDetails,
          [],
          {#detailsParam: detailsParam},
        ),
        returnValue: _i7.Future<_i3.MovieDetailsResponse>.value(
            _FakeMovieDetailsResponse_1(
          this,
          Invocation.method(
            #getMovieDetails,
            [],
            {#detailsParam: detailsParam},
          ),
        )),
      ) as _i7.Future<_i3.MovieDetailsResponse>);
  @override
  _i7.Future<_i4.PicturesResponse> getMoviePictures(
          {required _i10.MovieDetailsParam? detailsParam}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoviePictures,
          [],
          {#detailsParam: detailsParam},
        ),
        returnValue:
            _i7.Future<_i4.PicturesResponse>.value(_FakePicturesResponse_2(
          this,
          Invocation.method(
            #getMoviePictures,
            [],
            {#detailsParam: detailsParam},
          ),
        )),
      ) as _i7.Future<_i4.PicturesResponse>);
  @override
  _i7.Future<_i5.CreditsResponse> getMovieCredits(
          {required _i10.MovieDetailsParam? detailsParam}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieCredits,
          [],
          {#detailsParam: detailsParam},
        ),
        returnValue:
            _i7.Future<_i5.CreditsResponse>.value(_FakeCreditsResponse_3(
          this,
          Invocation.method(
            #getMovieCredits,
            [],
            {#detailsParam: detailsParam},
          ),
        )),
      ) as _i7.Future<_i5.CreditsResponse>);
}

/// A class which mocks [MovieLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieLocalDataSource extends _i1.Mock
    implements _i11.MovieLocalDataSource {
  MockMovieLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> savePopularMoviesFirstPage(
          {required _i2.MovieResponse? movieResponse}) =>
      (super.noSuchMethod(
        Invocation.method(
          #savePopularMoviesFirstPage,
          [],
          {#movieResponse: movieResponse},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}
